name: CI

on:
  push:
    branches: [ actions ]

jobs:

  main:
    name: main
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
      - name: Make dist folder from SciTE version
        shell: bash
        run: |
          cd $GITHUB_WORKSPACE
          VERSION_SCITE=`awk '/VERSION_SCITE/ { gsub(/[^0-9]/, "", $3); print $3 }' wscite/scite/src/SciTE.h`
          echo VERSION_SCITE: $VERSION_SCITE
          DIST_DIR_NAME=wscite32_${VERSION_SCITE}-mod
          echo DIST_DIR_NAME: $DIST_DIR_NAME
          mkdir -p dist/$DIST_DIR_NAME/wscite
          ls dist/
          ls dist/*/
      - name: Install MinGW and list its binaries
        shell: bash
        run: |
          sudo apt-get install mingw-w64
          ls -1 /usr/bin | grep -i mingw
      - name: Install upx
        shell: bash
        run: |
          echo REM curl -kLO https://github.com/upx/upx/releases/download/v3.96/upx-3.96-amd64_linux.tar.xz
          echo REM sudo apt install xz-utils
          echo REM tar -xf upx-3.96-amd64_linux.tar.xz
          echo REM sudo cp upx /usr/bin
          upx --version
      - name: Backup binaries to be replaced by MinGW (just in case)
        shell: bash
        run: |
          cd /usr/bin
          sudo mv g++ MinGW-replaced-g++
          sudo mv gcc MinGW-replaced-gcc
          sudo mv ar MinGW-replaced-ar
          sudo mv ranlib MinGW-replaced-ranlib
          sudo mv strip MinGW-replaced-strip
      - name: Normalize names of used MinGW binaries (just in case)
        shell: bash
        run: |
          cd /usr/bin
          sudo ln -s i686-w64-mingw32-g++-win32 g++
          sudo ln -s i686-w64-mingw32-gcc-win32 gcc
          sudo ln -s i686-w64-mingw32-ar ar
          sudo ln -s i686-w64-mingw32-ranlib ranlib
          sudo ln -s i686-w64-mingw32-strip strip
          sudo ln -s i686-w64-mingw32-windres windres
      - name: Build it (and they will come)
        shell: bash
        run: |
          CROSS=i686-w64-mingw32-
          make -C wscite/scintilla/win32 CXX=${CROSS}c++-win32 WINDRES=${CROSS}windres AR=${CROSS}ar RANLIB=${CROSS}ranlib
          make -C wscite/scite/win32 CXX=${CROSS}c++-win32 CC=${CROSS}gcc-win32 WINDRES=${CROSS}windres
          ls wscite/scite/bin/
      - name: Cut the crap (and they might not regret it)
        shell: bash
        run: |
          strip wscite/scite/bin/Sc1.exe
          upx --brute wscite/scite/bin/Sc1.exe
      - name: Prepare artifact from build product
        shell: bash
        run: |
          echo REM rm wscite/scite/bin/empty.txt
          echo REM cp wscite/scite/doc/* wscite/scite/bin/
          echo REM cp wscite/scite/License.txt wscite/scite/bin/
          echo REM cp wscite/scite/lua/COPYRIGHT wscite/scite/bin/luaCOPYRIGHT
          echo REM mv wscite/scite/bin/* dist/*/wscite/
          cp wscite/scite/License.txt dist/*/wscite/
          cp wscite/scite/lua/COPYRIGHT dist/*/wscite/luaCOPYRIGHT
          cp wscite/scite/bin/Sc1.exe dist/*/wscite/
          cp wscite/scite/bin/*.properties dist/*/wscite/
          ls dist/*/wscite/
      - name: Derive artifact name
        shell: bash
        run: |
          DIST_DIR_NAME=`/bin/ls $GITHUB_WORKSPACE/dist/`
          echo DIST_DIR_NAME: $DIST_DIR_NAME
          DIST_DIR_PATH=$GITHUB_WORKSPACE/dist/$DIST_DIR_NAME
          echo DIST_DIR_PATH: $DIST_DIR_PATH
          echo "::set-env name=DIST_DIR_NAME::$DIST_DIR_NAME"
          echo "::set-env name=DIST_DIR_PATH::$DIST_DIR_PATH"
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.DIST_DIR_NAME }}
          path: ${{ env.DIST_DIR_PATH }}
